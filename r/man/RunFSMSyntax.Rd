% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RunFSMSyntax.R
\name{RunFSMSyntax}
\alias{RunFSMSyntax}
\title{Anylze Log Data with LogFSM}
\usage{
RunFSMSyntax(fsmsyntax, datafilename, zipfilename, title = "title",
  workingdir, outfilename, fsmfilename, fsmfiletype = "custom01",
  datafiletype = "jsonlite", verbose = F, flags = "",
  maxnumberofcases = -1, datafilefilter = "", ...)
}
\arguments{
\item{fsmsyntax}{String variable containing the FSM syntax to be processed. The syntax string must contain a valid LogFSM syntax in each line.}

\item{datafilename}{File name of a single data file (input).}

\item{zipfilename}{File name of a ZIP archive containing data files (input).}

\item{title}{Optional title of the analysis (will be used as file name)}

\item{workingdir}{Working directory (optional).}

\item{outfilename}{File name of the (internal) file in which the results are cached before they are returned as a list (optional). If no file name is specified, a file "{TITEL}.json" is created, where {TITEL} is the title of the analysis.}

\item{fsmfilename}{File name for the temporary file in which the LogFSM syntax is stored (optional).}

\item{fsmfiletype}{Typ der Syntax (default '''custom01'''). Intended for a possible extension by another syntax to define the finite state machine.}

\item{datafiletype}{Type of data format (default ````jsonlite\code{) in which the log data prepared with the function }PrepareLogData()``` are stored.}

\item{verbose}{Request verbose output messages.}

\item{flags}{List of flags. Multiple flages can be combined in the string variable using the pipe (|).}

\item{maxnumberofcases}{Restrict number of processed cases (use -1 for all cases)}

\item{datafilefilter}{String mask, which is used to select files. If specified, only those files are processed whose file name matches the filter.}

\item{...}{(Further arguments will be passed on if necessary)}
}
\value{
The function returns a list with the following components:
\itemize{
\item \code{AugmentedLogDataTable}
\item For each state machine $i$ the following tables are provided in the list
** \code{SequenceTable_i}
** \code{SequenceTable_i}
}
}
\description{
Function for reconstructing the list of states using LogFSM. The syntax to be used is passed via the variable \code{fsmsyntax}, the data to be used must be stored in the file
system and must be readable via the file name \code{datafilename`` (single file) or }zipfilename``` (ZIP archive).
}
\details{
The following data formats that can be used directly (see parameter @datafiletype) either as single case or as zip archive with multiple files for multiple cases:
\itemize{
\item \code{logfsmjson} (Format created by LogFSM when pre-processing using the function \code{PrepareLogData} )
\item \code{eexml} (Format created by the CBA ItemBuilder using the excecution environment.
}

Data formats that require pre-processing using the function \code{PrepareLogData} to create
the \code{logfsmjson}-format:
\itemize{
\item \code{dataflatv01a}: Flat table with log data
\item \code{piaacr1ldazip01a}  (r1 = round 1, 2012; lda = Log Data Analyzer)
}

Additional formats (under development)
\itemize{
\item \code{pisabqzip01a}, \code{pisacazip01a},  \code{nepszip01a}
This function supports the following flags:
\item \code{RELATIVETIME}The flag "RELATIVETIME" can be used to prepare log data provided with relative timestamps.
}
}
